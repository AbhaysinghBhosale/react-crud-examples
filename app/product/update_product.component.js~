// component that contains the logic to update a product
window.UpdateProductComponent = React.createClass({
	    getInitialState: function() {
	    // Get this product fields from the data attributes we set on the
	    // #content div, using jQuery
	    return {
		categories: [],
		selectedCategoryId: 0,
		id: 0,
		name: '',
		description: '',
		price: 0,
		successUpdate: null
	    };
	},
	 
	// on mount, fetch all categories and one product data to stored them as this component's state
	componentDidMount: function(){
	 
	    // read categories
	    this.serverRequestCat = $.get("http://localhost/api/category/read.php",
		function (categories) {
		    this.setState({
		        categories: categories.records
		    });
		}.bind(this));
	 
	    // read one product data
	    var productId = this.props.productId;
	    this.serverRequestProd = $.get("http://localhost/api/product/read_one.php?id=" + productId,
		function (product) {
		    this.setState({selectedCategoryId: product.category_id});
		    this.setState({id: product.id});
		    this.setState({name: product.name});
		    this.setState({description: product.description});
		    this.setState({price: product.price});
		}.bind(this));
	 
	    $('.page-header h1').text('Update product');
	},
	 
	// on unmount, kill categories fetching in case the request is still pending
	componentWillUnmount: function() {
	    this.serverRequestCat.abort();
	    this.serverRequestProd.abort();
	},
	 
	// handle category change
	onCategoryChange: function(e){
	    this.setState({selectedCategoryId: e.target.value});
	},
	 
	// handle name change
	onNameChange: function(e){
	    this.setState({name: e.target.value});
	},
	 
	// handle description change
	onDescriptionChange: function(e){
	    this.setState({description: e.target.value});
	},
	 
	// handle price change
	onPriceChange: function(e){
	    this.setState({price: e.target.value});
	},
	 
	// handle save changes button here

});
